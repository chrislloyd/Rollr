grammar Tuml

  rule document
    (static / container)* {
      def sexp
        elements.map {|elm| elm.sexp}.unshift :multi
      end
    }
  end

  rule static
    (!container .)+ {
      def sexp
        [:static, text_value]
      end
    }
  end

  rule container
    '{' inner:(sblock / eblock / ttag / atag / tatag / var / sbool / ebool / lang / tag) ws* '}' {
      def sexp
        inner.sexp
      end
    }
  end

  rule tag
    tag_name '' {
      def sexp
        [:tag, tag_name.sexp]
      end
    }
  end

  rule sblock
    'block:' tag_name {
      def sexp
        [:sblock, tag_name.sexp]
      end
    }
  end

  rule eblock
    '/block:' tag_name {
      def sexp
        [:eblock, tag_name.sexp]
      end
    }
  end

  rule ttag
    type:('JSPlaintext' / 'JS' / 'Plaintext' / 'URLEncoded') tag_name {
      def sexp
        [:ttag, type.text_value.downcase.to_sym, tag_name.sexp]
      end
    }
  end

  rule atag
    'Foo bar="baz"'
  end

  rule tatag
    'JSFoo bar="baz"'
  end

  rule var
    type:('color' / 'font' / 'image' / 'text') ':' long_tag_name {
      def sexp
        [type.text_value.to_sym, long_tag_name.sexp]
      end
    }
  end

  # TODO: Negative case "IfNot"
  rule sbool
    'block:IfFoo'
  end

  rule ebool
    '/block:IfFoo'
  end

  rule lang
    'lang:' long_tag_name {
      def sexp
        [:lang, long_tag_name.sexp]
      end
    }
  end


  rule long_tag_name
    (tag_name ws*)* {
      def sexp
        text_value
      end
    }
  end

  rule tag_name
    [0-9A-Za-z-]+ {
      def sexp
        text_value
      end
    }
  end

  rule ws
    [\t ]
  end

end
